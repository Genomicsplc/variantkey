package variantkey

import "testing"

var testDataBE8 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint8
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x00, 0, 0, 1, 1, 2, 2},
	{0, 1, 251, 0x00, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x01, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x10, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x20, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x30, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x40, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x50, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x60, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x70, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x80, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x90, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9f, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xaf, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbf, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcf, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdf, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xef, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x70, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x70, 251, 150, 150, 251, 150, 150},
}

var testDataBESub8 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint8
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x00, 0, 0, 1, 1, 2, 2},
	{0, 1, 251, 0x00, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x01, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x10, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x20, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x30, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x40, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x50, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x60, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x70, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x80, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x90, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9f, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xaf, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbf, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcf, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdf, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xef, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x70, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x70, 251, 150, 150, 251, 150, 150},
}

var testDataLE8 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint8
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{15, 0, 251, 0x00, 0, 0, 1, 1, 2, 2},
	{15, 1, 251, 0x00, 1, 1, 1, 1, 2, 2},
	{15, 0, 251, 0x01, 2, 2, 2, 2, 3, 3},
	{15, 0, 251, 0x0f, 16, 16, 16, 16, 17, 17},
	{15, 0, 251, 0x10, 17, 17, 17, 17, 18, 18},
	{15, 0, 251, 0x1f, 32, 32, 32, 32, 33, 33},
	{15, 0, 251, 0x20, 33, 33, 33, 33, 34, 34},
	{15, 0, 251, 0x2f, 48, 48, 48, 48, 49, 49},
	{15, 0, 251, 0x30, 49, 49, 49, 49, 50, 50},
	{15, 0, 251, 0x3f, 64, 64, 64, 64, 65, 65},
	{15, 0, 251, 0x40, 65, 65, 65, 65, 66, 66},
	{15, 0, 251, 0x4f, 80, 80, 80, 80, 81, 81},
	{15, 0, 251, 0x50, 81, 81, 81, 81, 82, 82},
	{15, 0, 251, 0x5f, 96, 96, 96, 96, 97, 97},
	{15, 0, 251, 0x60, 97, 97, 97, 97, 98, 98},
	{15, 0, 251, 0x6f, 112, 112, 112, 112, 113, 113},
	{15, 0, 251, 0x70, 113, 113, 113, 113, 114, 114},
	{15, 0, 251, 0x7f, 128, 128, 128, 128, 129, 129},
	{15, 0, 251, 0x80, 129, 129, 129, 129, 130, 130},
	{15, 0, 251, 0x8f, 144, 144, 144, 144, 145, 145},
	{15, 0, 251, 0x90, 145, 145, 145, 145, 146, 146},
	{15, 0, 251, 0x9f, 160, 160, 160, 160, 161, 161},
	{15, 0, 251, 0xa0, 161, 161, 161, 161, 162, 162},
	{15, 0, 251, 0xaf, 176, 176, 176, 176, 177, 177},
	{15, 0, 251, 0xb0, 177, 177, 177, 177, 178, 178},
	{15, 0, 251, 0xbf, 192, 192, 192, 192, 193, 193},
	{15, 0, 251, 0xc0, 193, 193, 193, 193, 194, 194},
	{15, 0, 251, 0xcf, 208, 208, 208, 208, 209, 209},
	{15, 0, 251, 0xd0, 209, 209, 209, 209, 210, 210},
	{15, 0, 251, 0xdf, 224, 224, 224, 224, 225, 225},
	{15, 0, 251, 0xe0, 225, 225, 225, 225, 226, 226},
	{15, 0, 251, 0xef, 240, 240, 240, 240, 241, 241},
	{15, 0, 251, 0xf0, 241, 241, 241, 241, 242, 242},
	{15, 0, 251, 0xf8, 249, 249, 249, 249, 250, 250},
	{15, 0, 251, 0xff, 250, 250, 250, 250, 251, 251},
	{15, 0, 251, 0xf9, 251, 250, 250, 251, 250, 250},
	{15, 0, 51, 0x70, 51, 51, 51, 51, 51, 51},
	{15, 150, 251, 0x70, 251, 150, 150, 251, 150, 150},
}

var testDataLESub8 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint8
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{15, 0, 251, 0x00, 0, 0, 1, 1, 2, 2},
	{15, 1, 251, 0x00, 1, 1, 1, 1, 2, 2},
	{15, 0, 251, 0x01, 2, 2, 2, 2, 3, 3},
	{15, 0, 251, 0x0f, 16, 16, 16, 16, 17, 17},
	{15, 0, 251, 0x10, 17, 17, 17, 17, 18, 18},
	{15, 0, 251, 0x1f, 32, 32, 32, 32, 33, 33},
	{15, 0, 251, 0x20, 33, 33, 33, 33, 34, 34},
	{15, 0, 251, 0x2f, 48, 48, 48, 48, 49, 49},
	{15, 0, 251, 0x30, 49, 49, 49, 49, 50, 50},
	{15, 0, 251, 0x3f, 64, 64, 64, 64, 65, 65},
	{15, 0, 251, 0x40, 65, 65, 65, 65, 66, 66},
	{15, 0, 251, 0x4f, 80, 80, 80, 80, 81, 81},
	{15, 0, 251, 0x50, 81, 81, 81, 81, 82, 82},
	{15, 0, 251, 0x5f, 96, 96, 96, 96, 97, 97},
	{15, 0, 251, 0x60, 97, 97, 97, 97, 98, 98},
	{15, 0, 251, 0x6f, 112, 112, 112, 112, 113, 113},
	{15, 0, 251, 0x70, 113, 113, 113, 113, 114, 114},
	{15, 0, 251, 0x7f, 128, 128, 128, 128, 129, 129},
	{15, 0, 251, 0x80, 129, 129, 129, 129, 130, 130},
	{15, 0, 251, 0x8f, 144, 144, 144, 144, 145, 145},
	{15, 0, 251, 0x90, 145, 145, 145, 145, 146, 146},
	{15, 0, 251, 0x9f, 160, 160, 160, 160, 161, 161},
	{15, 0, 251, 0xa0, 161, 161, 161, 161, 162, 162},
	{15, 0, 251, 0xaf, 176, 176, 176, 176, 177, 177},
	{15, 0, 251, 0xb0, 177, 177, 177, 177, 178, 178},
	{15, 0, 251, 0xbf, 192, 192, 192, 192, 193, 193},
	{15, 0, 251, 0xc0, 193, 193, 193, 193, 194, 194},
	{15, 0, 251, 0xcf, 208, 208, 208, 208, 209, 209},
	{15, 0, 251, 0xd0, 209, 209, 209, 209, 210, 210},
	{15, 0, 251, 0xdf, 224, 224, 224, 224, 225, 225},
	{15, 0, 251, 0xe0, 225, 225, 225, 225, 226, 226},
	{15, 0, 251, 0xef, 240, 240, 240, 240, 241, 241},
	{15, 0, 251, 0xf0, 241, 241, 241, 241, 242, 242},
	{15, 0, 251, 0xf8, 249, 249, 249, 249, 250, 250},
	{15, 0, 251, 0xff, 250, 250, 250, 250, 251, 251},
	{15, 0, 251, 0xf9, 251, 250, 250, 251, 250, 250},
	{15, 0, 51, 0x70, 51, 51, 51, 51, 51, 51},
	{15, 150, 251, 0x70, 251, 150, 150, 251, 150, 150},
}

var testDataBE16 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint16
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x0000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x0001, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x0102, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f10, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x1011, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f20, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x2021, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f30, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x3031, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f40, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x4041, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f50, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x5051, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f60, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x6061, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f70, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x7071, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f80, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x8081, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f90, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x9091, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9fa0, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0a1, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xafb0, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0b1, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbfc0, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0c1, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcfd0, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0d1, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdfe0, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0e1, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xeff0, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0f1, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8f9, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9f9, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x7071, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x7071, 251, 150, 150, 251, 150, 150},
}

var testDataBESub16 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint16
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x0000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x0001, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x0102, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f10, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x1011, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f20, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x2021, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f30, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x3031, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f40, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x4041, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f50, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x5051, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f60, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x6061, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f70, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x7071, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f80, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x8081, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f90, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x9091, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9fa0, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0a1, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xafb0, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0b1, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbfc0, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0c1, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcfd0, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0d1, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdfe0, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0e1, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xeff0, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0f1, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8f9, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9f9, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x7071, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x7071, 251, 150, 150, 251, 150, 150},
}

var testDataLE16 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint16
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{14, 0, 251, 0x0000, 0, 0, 1, 0, 1, 1},
	{14, 1, 251, 0x0001, 1, 1, 1, 1, 2, 2},
	{14, 0, 251, 0x0102, 2, 2, 2, 2, 3, 3},
	{14, 0, 251, 0x0f10, 16, 16, 16, 16, 17, 17},
	{14, 0, 251, 0x1011, 17, 17, 17, 17, 18, 18},
	{14, 0, 251, 0x1f20, 32, 32, 32, 32, 33, 33},
	{14, 0, 251, 0x2021, 33, 33, 33, 33, 34, 34},
	{14, 0, 251, 0x2f30, 48, 48, 48, 48, 49, 49},
	{14, 0, 251, 0x3031, 49, 49, 49, 49, 50, 50},
	{14, 0, 251, 0x3f40, 64, 64, 64, 64, 65, 65},
	{14, 0, 251, 0x4041, 65, 65, 65, 65, 66, 66},
	{14, 0, 251, 0x4f50, 80, 80, 80, 80, 81, 81},
	{14, 0, 251, 0x5051, 81, 81, 81, 81, 82, 82},
	{14, 0, 251, 0x5f60, 96, 96, 96, 96, 97, 97},
	{14, 0, 251, 0x6061, 97, 97, 97, 97, 98, 98},
	{14, 0, 251, 0x6f70, 112, 112, 112, 112, 113, 113},
	{14, 0, 251, 0x7071, 113, 113, 113, 113, 114, 114},
	{14, 0, 251, 0x7f80, 128, 128, 128, 128, 129, 129},
	{14, 0, 251, 0x8081, 129, 129, 129, 129, 130, 130},
	{14, 0, 251, 0x8f90, 144, 144, 144, 144, 145, 145},
	{14, 0, 251, 0x9091, 145, 145, 145, 145, 146, 146},
	{14, 0, 251, 0x9fa0, 160, 160, 160, 160, 161, 161},
	{14, 0, 251, 0xa0a1, 161, 161, 161, 161, 162, 162},
	{14, 0, 251, 0xafb0, 176, 176, 176, 176, 177, 177},
	{14, 0, 251, 0xb0b1, 177, 177, 177, 177, 178, 178},
	{14, 0, 251, 0xbfc0, 192, 192, 192, 192, 193, 193},
	{14, 0, 251, 0xc0c1, 193, 193, 193, 193, 194, 194},
	{14, 0, 251, 0xcfd0, 208, 208, 208, 208, 209, 209},
	{14, 0, 251, 0xd0d1, 209, 209, 209, 209, 210, 210},
	{14, 0, 251, 0xdfe0, 224, 224, 224, 224, 225, 225},
	{14, 0, 251, 0xe0e1, 225, 225, 225, 225, 226, 226},
	{14, 0, 251, 0xeff0, 240, 240, 240, 240, 241, 241},
	{14, 0, 251, 0xf0f1, 241, 241, 241, 241, 242, 242},
	{14, 0, 251, 0xf8f9, 249, 249, 249, 249, 250, 250},
	{14, 0, 251, 0xffff, 250, 250, 250, 250, 251, 251},
	{14, 0, 251, 0xf9f9, 251, 250, 250, 251, 250, 250},
	{14, 0, 51, 0x7071, 51, 51, 51, 51, 51, 51},
	{14, 150, 251, 0x7071, 251, 150, 150, 251, 150, 150},
}

var testDataLESub16 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint16
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{14, 0, 251, 0x0000, 0, 0, 1, 0, 1, 1},
	{14, 1, 251, 0x0001, 1, 1, 1, 1, 2, 2},
	{14, 0, 251, 0x0102, 2, 2, 2, 2, 3, 3},
	{14, 0, 251, 0x0f10, 16, 16, 16, 16, 17, 17},
	{14, 0, 251, 0x1011, 17, 17, 17, 17, 18, 18},
	{14, 0, 251, 0x1f20, 32, 32, 32, 32, 33, 33},
	{14, 0, 251, 0x2021, 33, 33, 33, 33, 34, 34},
	{14, 0, 251, 0x2f30, 48, 48, 48, 48, 49, 49},
	{14, 0, 251, 0x3031, 49, 49, 49, 49, 50, 50},
	{14, 0, 251, 0x3f40, 64, 64, 64, 64, 65, 65},
	{14, 0, 251, 0x4041, 65, 65, 65, 65, 66, 66},
	{14, 0, 251, 0x4f50, 80, 80, 80, 80, 81, 81},
	{14, 0, 251, 0x5051, 81, 81, 81, 81, 82, 82},
	{14, 0, 251, 0x5f60, 96, 96, 96, 96, 97, 97},
	{14, 0, 251, 0x6061, 97, 97, 97, 97, 98, 98},
	{14, 0, 251, 0x6f70, 112, 112, 112, 112, 113, 113},
	{14, 0, 251, 0x7071, 113, 113, 113, 113, 114, 114},
	{14, 0, 251, 0x7f80, 128, 128, 128, 128, 129, 129},
	{14, 0, 251, 0x8081, 129, 129, 129, 129, 130, 130},
	{14, 0, 251, 0x8f90, 144, 144, 144, 144, 145, 145},
	{14, 0, 251, 0x9091, 145, 145, 145, 145, 146, 146},
	{14, 0, 251, 0x9fa0, 160, 160, 160, 160, 161, 161},
	{14, 0, 251, 0xa0a1, 161, 161, 161, 161, 162, 162},
	{14, 0, 251, 0xafb0, 176, 176, 176, 176, 177, 177},
	{14, 0, 251, 0xb0b1, 177, 177, 177, 177, 178, 178},
	{14, 0, 251, 0xbfc0, 192, 192, 192, 192, 193, 193},
	{14, 0, 251, 0xc0c1, 193, 193, 193, 193, 194, 194},
	{14, 0, 251, 0xcfd0, 208, 208, 208, 208, 209, 209},
	{14, 0, 251, 0xd0d1, 209, 209, 209, 209, 210, 210},
	{14, 0, 251, 0xdfe0, 224, 224, 224, 224, 225, 225},
	{14, 0, 251, 0xe0e1, 225, 225, 225, 225, 226, 226},
	{14, 0, 251, 0xeff0, 240, 240, 240, 240, 241, 241},
	{14, 0, 251, 0xf0f1, 241, 241, 241, 241, 242, 242},
	{14, 0, 251, 0xf8f9, 249, 249, 249, 249, 250, 250},
	{14, 0, 251, 0xffff, 250, 250, 250, 250, 251, 251},
	{14, 0, 251, 0xf9f9, 251, 250, 250, 251, 250, 250},
	{14, 0, 51, 0x7071, 51, 51, 51, 51, 51, 51},
	{14, 150, 251, 0x7071, 251, 150, 150, 251, 150, 150},
}

var testDataBE32 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint32
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x00000000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x00010203, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x01020304, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f101112, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x10111213, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f202122, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x20212223, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f303132, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x30313233, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f404142, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x40414243, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f505152, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x50515253, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f606162, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x60616263, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f707172, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x70717273, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f808182, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x80818283, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f909192, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x90919293, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9fa0a1a2, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0a1a2a3, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xafb0b1b2, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0b1b2b3, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbfc0c1c2, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0c1c2c3, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcfd0d1d2, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0d1d2d3, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdfe0e1e2, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0e1e2e3, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xeff0f1f2, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0f1f2f3, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8f9fafb, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xffffffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9f9fafb, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x70717273, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x70717273, 251, 150, 150, 251, 150, 150},
}

var testDataBESub32 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint32
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x00000000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x00000102, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x00000203, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x00001011, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x00001112, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x00002021, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x00002122, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x00003031, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x00003132, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x00004041, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x00004142, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x00005051, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x00005152, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x00006061, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x00006162, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x00007071, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x00007172, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x00008081, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x00008182, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x00009091, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x00009192, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x0000a0a1, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0x0000a1a2, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0x0000b0b1, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0x0000b1b2, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0x0000c0c1, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0x0000c1c2, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0x0000d0d1, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0x0000d1d2, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0x0000e0e1, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0x0000e1e2, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0x0000f0f1, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0x0000f1f2, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0x0000f9fa, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0x0000ffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0x0000f9fa, 249, 249, 249, 249, 250, 250},
	{0, 0, 51, 0x00007172, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x00007172, 251, 150, 150, 251, 150, 150},
}

var testDataLE32 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint32
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{12, 0, 251, 0x00000000, 0, 0, 1, 0, 1, 1},
	{12, 1, 251, 0x00010203, 1, 1, 1, 1, 2, 2},
	{12, 0, 251, 0x01020304, 2, 2, 2, 2, 3, 3},
	{12, 0, 251, 0x0f101112, 16, 16, 16, 16, 17, 17},
	{12, 0, 251, 0x10111213, 17, 17, 17, 17, 18, 18},
	{12, 0, 251, 0x1f202122, 32, 32, 32, 32, 33, 33},
	{12, 0, 251, 0x20212223, 33, 33, 33, 33, 34, 34},
	{12, 0, 251, 0x2f303132, 48, 48, 48, 48, 49, 49},
	{12, 0, 251, 0x30313233, 49, 49, 49, 49, 50, 50},
	{12, 0, 251, 0x3f404142, 64, 64, 64, 64, 65, 65},
	{12, 0, 251, 0x40414243, 65, 65, 65, 65, 66, 66},
	{12, 0, 251, 0x4f505152, 80, 80, 80, 80, 81, 81},
	{12, 0, 251, 0x50515253, 81, 81, 81, 81, 82, 82},
	{12, 0, 251, 0x5f606162, 96, 96, 96, 96, 97, 97},
	{12, 0, 251, 0x60616263, 97, 97, 97, 97, 98, 98},
	{12, 0, 251, 0x6f707172, 112, 112, 112, 112, 113, 113},
	{12, 0, 251, 0x70717273, 113, 113, 113, 113, 114, 114},
	{12, 0, 251, 0x7f808182, 128, 128, 128, 128, 129, 129},
	{12, 0, 251, 0x80818283, 129, 129, 129, 129, 130, 130},
	{12, 0, 251, 0x8f909192, 144, 144, 144, 144, 145, 145},
	{12, 0, 251, 0x90919293, 145, 145, 145, 145, 146, 146},
	{12, 0, 251, 0x9fa0a1a2, 160, 160, 160, 160, 161, 161},
	{12, 0, 251, 0xa0a1a2a3, 161, 161, 161, 161, 162, 162},
	{12, 0, 251, 0xafb0b1b2, 176, 176, 176, 176, 177, 177},
	{12, 0, 251, 0xb0b1b2b3, 177, 177, 177, 177, 178, 178},
	{12, 0, 251, 0xbfc0c1c2, 192, 192, 192, 192, 193, 193},
	{12, 0, 251, 0xc0c1c2c3, 193, 193, 193, 193, 194, 194},
	{12, 0, 251, 0xcfd0d1d2, 208, 208, 208, 208, 209, 209},
	{12, 0, 251, 0xd0d1d2d3, 209, 209, 209, 209, 210, 210},
	{12, 0, 251, 0xdfe0e1e2, 224, 224, 224, 224, 225, 225},
	{12, 0, 251, 0xe0e1e2e3, 225, 225, 225, 225, 226, 226},
	{12, 0, 251, 0xeff0f1f2, 240, 240, 240, 240, 241, 241},
	{12, 0, 251, 0xf0f1f2f3, 241, 241, 241, 241, 242, 242},
	{12, 0, 251, 0xf8f9fafb, 249, 249, 249, 249, 250, 250},
	{12, 0, 251, 0xffffffff, 250, 250, 250, 250, 251, 251},
	{12, 0, 251, 0xf9f9fafb, 251, 250, 250, 251, 250, 250},
	{12, 0, 51, 0x70717273, 51, 51, 51, 51, 51, 51},
	{12, 150, 251, 0x70717273, 251, 150, 150, 251, 150, 150},
}

var testDataLESub32 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint32
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{12, 0, 251, 0x00000000, 0, 0, 1, 0, 1, 1},
	{12, 1, 251, 0x00000102, 1, 1, 1, 1, 2, 2},
	{12, 0, 251, 0x00000203, 2, 2, 2, 2, 3, 3},
	{12, 0, 251, 0x00001011, 16, 16, 16, 16, 17, 17},
	{12, 0, 251, 0x00001112, 17, 17, 17, 17, 18, 18},
	{12, 0, 251, 0x00002021, 32, 32, 32, 32, 33, 33},
	{12, 0, 251, 0x00002122, 33, 33, 33, 33, 34, 34},
	{12, 0, 251, 0x00003031, 48, 48, 48, 48, 49, 49},
	{12, 0, 251, 0x00003132, 49, 49, 49, 49, 50, 50},
	{12, 0, 251, 0x00004041, 64, 64, 64, 64, 65, 65},
	{12, 0, 251, 0x00004142, 65, 65, 65, 65, 66, 66},
	{12, 0, 251, 0x00005051, 80, 80, 80, 80, 81, 81},
	{12, 0, 251, 0x00005152, 81, 81, 81, 81, 82, 82},
	{12, 0, 251, 0x00006061, 96, 96, 96, 96, 97, 97},
	{12, 0, 251, 0x00006162, 97, 97, 97, 97, 98, 98},
	{12, 0, 251, 0x00007071, 112, 112, 112, 112, 113, 113},
	{12, 0, 251, 0x00007172, 113, 113, 113, 113, 114, 114},
	{12, 0, 251, 0x00008081, 128, 128, 128, 128, 129, 129},
	{12, 0, 251, 0x00008182, 129, 129, 129, 129, 130, 130},
	{12, 0, 251, 0x00009091, 144, 144, 144, 144, 145, 145},
	{12, 0, 251, 0x00009192, 145, 145, 145, 145, 146, 146},
	{12, 0, 251, 0x0000a0a1, 160, 160, 160, 160, 161, 161},
	{12, 0, 251, 0x0000a1a2, 161, 161, 161, 161, 162, 162},
	{12, 0, 251, 0x0000b0b1, 176, 176, 176, 176, 177, 177},
	{12, 0, 251, 0x0000b1b2, 177, 177, 177, 177, 178, 178},
	{12, 0, 251, 0x0000c0c1, 192, 192, 192, 192, 193, 193},
	{12, 0, 251, 0x0000c1c2, 193, 193, 193, 193, 194, 194},
	{12, 0, 251, 0x0000d0d1, 208, 208, 208, 208, 209, 209},
	{12, 0, 251, 0x0000d1d2, 209, 209, 209, 209, 210, 210},
	{12, 0, 251, 0x0000e0e1, 224, 224, 224, 224, 225, 225},
	{12, 0, 251, 0x0000e1e2, 225, 225, 225, 225, 226, 226},
	{12, 0, 251, 0x0000f0f1, 240, 240, 240, 240, 241, 241},
	{12, 0, 251, 0x0000f1f2, 241, 241, 241, 241, 242, 242},
	{12, 0, 251, 0x0000f9fa, 249, 249, 249, 249, 250, 250},
	{12, 0, 251, 0x0000ffff, 250, 250, 250, 250, 251, 251},
	{12, 0, 251, 0x0000f9fa, 249, 249, 249, 249, 250, 250},
	{12, 0, 51, 0x00007172, 51, 51, 51, 51, 51, 51},
	{12, 150, 251, 0x00007172, 251, 150, 150, 251, 150, 150},
}

var testDataBE64 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint64
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x0000000000000000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x0001020304050607, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x0102030405060708, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0f10111213141516, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x1011121314151617, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x1f20212223242526, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x2021222324252627, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x2f30313233343536, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x3031323334353637, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x3f40414243444546, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x4041424344454647, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x4f50515253545556, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x5051525354555657, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x5f60616263646566, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x6061626364656667, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x6f70717273747576, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x7071727374757677, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x7f80818283848586, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x8081828384858687, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x8f90919293949596, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x9091929394959697, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x9fa0a1a2a3a4a5a6, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0xa0a1a2a3a4a5a6a7, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0xafb0b1b2b3b4b5b6, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0xb0b1b2b3b4b5b6b7, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0xbfc0c1c2c3c4c5c6, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0xc0c1c2c3c4c5c6c7, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0xcfd0d1d2d3d4d5d6, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0xd0d1d2d3d4d5d6d7, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0xdfe0e1e2e3e4e5e6, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0xe0e1e2e3e4e5e6e7, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0xeff0f1f2f3f4f5f6, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0xf0f1f2f3f4f5f6f7, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0xf8f9fafbfcfdfeff, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0xffffffffffffffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0xf9f9fafbfcfdfeff, 251, 250, 250, 251, 250, 250},
	{0, 0, 51, 0x7071727374757677, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x7071727374757677, 251, 150, 150, 251, 150, 150},
}

var testDataBESub64 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint64
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{0, 0, 251, 0x0000000000000000, 0, 0, 1, 0, 1, 1},
	{0, 1, 251, 0x0000000002030405, 1, 1, 1, 1, 2, 2},
	{0, 0, 251, 0x0000000003040506, 2, 2, 2, 2, 3, 3},
	{0, 0, 251, 0x0000000011121314, 16, 16, 16, 16, 17, 17},
	{0, 0, 251, 0x0000000012131415, 17, 17, 17, 17, 18, 18},
	{0, 0, 251, 0x0000000021222324, 32, 32, 32, 32, 33, 33},
	{0, 0, 251, 0x0000000022232425, 33, 33, 33, 33, 34, 34},
	{0, 0, 251, 0x0000000031323334, 48, 48, 48, 48, 49, 49},
	{0, 0, 251, 0x0000000032333435, 49, 49, 49, 49, 50, 50},
	{0, 0, 251, 0x0000000041424344, 64, 64, 64, 64, 65, 65},
	{0, 0, 251, 0x0000000042434445, 65, 65, 65, 65, 66, 66},
	{0, 0, 251, 0x0000000051525354, 80, 80, 80, 80, 81, 81},
	{0, 0, 251, 0x0000000052535455, 81, 81, 81, 81, 82, 82},
	{0, 0, 251, 0x0000000061626364, 96, 96, 96, 96, 97, 97},
	{0, 0, 251, 0x0000000062636465, 97, 97, 97, 97, 98, 98},
	{0, 0, 251, 0x0000000071727374, 112, 112, 112, 112, 113, 113},
	{0, 0, 251, 0x0000000072737475, 113, 113, 113, 113, 114, 114},
	{0, 0, 251, 0x0000000081828384, 128, 128, 128, 128, 129, 129},
	{0, 0, 251, 0x0000000082838485, 129, 129, 129, 129, 130, 130},
	{0, 0, 251, 0x0000000091929394, 144, 144, 144, 144, 145, 145},
	{0, 0, 251, 0x0000000092939495, 145, 145, 145, 145, 146, 146},
	{0, 0, 251, 0x00000000a1a2a3a4, 160, 160, 160, 160, 161, 161},
	{0, 0, 251, 0x00000000a2a3a4a5, 161, 161, 161, 161, 162, 162},
	{0, 0, 251, 0x00000000b1b2b3b4, 176, 176, 176, 176, 177, 177},
	{0, 0, 251, 0x00000000b2b3b4b5, 177, 177, 177, 177, 178, 178},
	{0, 0, 251, 0x00000000c1c2c3c4, 192, 192, 192, 192, 193, 193},
	{0, 0, 251, 0x00000000c2c3c4c5, 193, 193, 193, 193, 194, 194},
	{0, 0, 251, 0x00000000d1d2d3d4, 208, 208, 208, 208, 209, 209},
	{0, 0, 251, 0x00000000d2d3d4d5, 209, 209, 209, 209, 210, 210},
	{0, 0, 251, 0x00000000e1e2e3e4, 224, 224, 224, 224, 225, 225},
	{0, 0, 251, 0x00000000e2e3e4e5, 225, 225, 225, 225, 226, 226},
	{0, 0, 251, 0x00000000f1f2f3f4, 240, 240, 240, 240, 241, 241},
	{0, 0, 251, 0x00000000f2f3f4f5, 241, 241, 241, 241, 242, 242},
	{0, 0, 251, 0x00000000fafbfcfd, 249, 249, 249, 249, 250, 250},
	{0, 0, 251, 0x00000000ffffffff, 250, 250, 250, 250, 251, 251},
	{0, 0, 251, 0x00000000fafbfcfd, 249, 249, 249, 249, 250, 250},
	{0, 0, 51, 0x0000000072737475, 51, 51, 51, 51, 51, 51},
	{0, 150, 251, 0x0000000072737475, 251, 150, 150, 251, 150, 150},
}

var testDataLE64 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint64
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{8, 0, 251, 0x0000000000000000, 0, 0, 1, 0, 1, 1},
	{8, 1, 251, 0x0001020304050607, 1, 1, 1, 1, 2, 2},
	{8, 0, 251, 0x0102030405060708, 2, 2, 2, 2, 3, 3},
	{8, 0, 251, 0x0f10111213141516, 16, 16, 16, 16, 17, 17},
	{8, 0, 251, 0x1011121314151617, 17, 17, 17, 17, 18, 18},
	{8, 0, 251, 0x1f20212223242526, 32, 32, 32, 32, 33, 33},
	{8, 0, 251, 0x2021222324252627, 33, 33, 33, 33, 34, 34},
	{8, 0, 251, 0x2f30313233343536, 48, 48, 48, 48, 49, 49},
	{8, 0, 251, 0x3031323334353637, 49, 49, 49, 49, 50, 50},
	{8, 0, 251, 0x3f40414243444546, 64, 64, 64, 64, 65, 65},
	{8, 0, 251, 0x4041424344454647, 65, 65, 65, 65, 66, 66},
	{8, 0, 251, 0x4f50515253545556, 80, 80, 80, 80, 81, 81},
	{8, 0, 251, 0x5051525354555657, 81, 81, 81, 81, 82, 82},
	{8, 0, 251, 0x5f60616263646566, 96, 96, 96, 96, 97, 97},
	{8, 0, 251, 0x6061626364656667, 97, 97, 97, 97, 98, 98},
	{8, 0, 251, 0x6f70717273747576, 112, 112, 112, 112, 113, 113},
	{8, 0, 251, 0x7071727374757677, 113, 113, 113, 113, 114, 114},
	{8, 0, 251, 0x7f80818283848586, 128, 128, 128, 128, 129, 129},
	{8, 0, 251, 0x8081828384858687, 129, 129, 129, 129, 130, 130},
	{8, 0, 251, 0x8f90919293949596, 144, 144, 144, 144, 145, 145},
	{8, 0, 251, 0x9091929394959697, 145, 145, 145, 145, 146, 146},
	{8, 0, 251, 0x9fa0a1a2a3a4a5a6, 160, 160, 160, 160, 161, 161},
	{8, 0, 251, 0xa0a1a2a3a4a5a6a7, 161, 161, 161, 161, 162, 162},
	{8, 0, 251, 0xafb0b1b2b3b4b5b6, 176, 176, 176, 176, 177, 177},
	{8, 0, 251, 0xb0b1b2b3b4b5b6b7, 177, 177, 177, 177, 178, 178},
	{8, 0, 251, 0xbfc0c1c2c3c4c5c6, 192, 192, 192, 192, 193, 193},
	{8, 0, 251, 0xc0c1c2c3c4c5c6c7, 193, 193, 193, 193, 194, 194},
	{8, 0, 251, 0xcfd0d1d2d3d4d5d6, 208, 208, 208, 208, 209, 209},
	{8, 0, 251, 0xd0d1d2d3d4d5d6d7, 209, 209, 209, 209, 210, 210},
	{8, 0, 251, 0xdfe0e1e2e3e4e5e6, 224, 224, 224, 224, 225, 225},
	{8, 0, 251, 0xe0e1e2e3e4e5e6e7, 225, 225, 225, 225, 226, 226},
	{8, 0, 251, 0xeff0f1f2f3f4f5f6, 240, 240, 240, 240, 241, 241},
	{8, 0, 251, 0xf0f1f2f3f4f5f6f7, 241, 241, 241, 241, 242, 242},
	{8, 0, 251, 0xf8f9fafbfcfdfeff, 249, 249, 249, 249, 250, 250},
	{8, 0, 251, 0xffffffffffffffff, 250, 250, 250, 250, 251, 251},
	{8, 0, 251, 0xf9f9fafbfcfdfeff, 251, 250, 250, 251, 250, 250},
	{8, 0, 51, 0x7071727374757677, 51, 51, 51, 51, 51, 51},
	{8, 150, 251, 0x7071727374757677, 251, 150, 150, 251, 150, 150},
}

var testDataLESub64 = []struct {
	blkpos      uint64
	first       uint64
	last        uint64
	search      uint64
	foundFirst  uint64
	foundFFirst uint64
	foundFLast  uint64
	foundLast   uint64
	foundLFirst uint64
	foundLLast  uint64
}{
	{8, 0, 251, 0x0000000000000000, 0, 0, 1, 0, 1, 1},
	{8, 1, 251, 0x0000000002030405, 1, 1, 1, 1, 2, 2},
	{8, 0, 251, 0x0000000003040506, 2, 2, 2, 2, 3, 3},
	{8, 0, 251, 0x0000000011121314, 16, 16, 16, 16, 17, 17},
	{8, 0, 251, 0x0000000012131415, 17, 17, 17, 17, 18, 18},
	{8, 0, 251, 0x0000000021222324, 32, 32, 32, 32, 33, 33},
	{8, 0, 251, 0x0000000022232425, 33, 33, 33, 33, 34, 34},
	{8, 0, 251, 0x0000000031323334, 48, 48, 48, 48, 49, 49},
	{8, 0, 251, 0x0000000032333435, 49, 49, 49, 49, 50, 50},
	{8, 0, 251, 0x0000000041424344, 64, 64, 64, 64, 65, 65},
	{8, 0, 251, 0x0000000042434445, 65, 65, 65, 65, 66, 66},
	{8, 0, 251, 0x0000000051525354, 80, 80, 80, 80, 81, 81},
	{8, 0, 251, 0x0000000052535455, 81, 81, 81, 81, 82, 82},
	{8, 0, 251, 0x0000000061626364, 96, 96, 96, 96, 97, 97},
	{8, 0, 251, 0x0000000062636465, 97, 97, 97, 97, 98, 98},
	{8, 0, 251, 0x0000000071727374, 112, 112, 112, 112, 113, 113},
	{8, 0, 251, 0x0000000072737475, 113, 113, 113, 113, 114, 114},
	{8, 0, 251, 0x0000000081828384, 128, 128, 128, 128, 129, 129},
	{8, 0, 251, 0x0000000082838485, 129, 129, 129, 129, 130, 130},
	{8, 0, 251, 0x0000000091929394, 144, 144, 144, 144, 145, 145},
	{8, 0, 251, 0x0000000092939495, 145, 145, 145, 145, 146, 146},
	{8, 0, 251, 0x00000000a1a2a3a4, 160, 160, 160, 160, 161, 161},
	{8, 0, 251, 0x00000000a2a3a4a5, 161, 161, 161, 161, 162, 162},
	{8, 0, 251, 0x00000000b1b2b3b4, 176, 176, 176, 176, 177, 177},
	{8, 0, 251, 0x00000000b2b3b4b5, 177, 177, 177, 177, 178, 178},
	{8, 0, 251, 0x00000000c1c2c3c4, 192, 192, 192, 192, 193, 193},
	{8, 0, 251, 0x00000000c2c3c4c5, 193, 193, 193, 193, 194, 194},
	{8, 0, 251, 0x00000000d1d2d3d4, 208, 208, 208, 208, 209, 209},
	{8, 0, 251, 0x00000000d2d3d4d5, 209, 209, 209, 209, 210, 210},
	{8, 0, 251, 0x00000000e1e2e3e4, 224, 224, 224, 224, 225, 225},
	{8, 0, 251, 0x00000000e2e3e4e5, 225, 225, 225, 225, 226, 226},
	{8, 0, 251, 0x00000000f1f2f3f4, 240, 240, 240, 240, 241, 241},
	{8, 0, 251, 0x00000000f2f3f4f5, 241, 241, 241, 241, 242, 242},
	{8, 0, 251, 0x00000000fafbfcfd, 249, 249, 249, 249, 250, 250},
	{8, 0, 251, 0x00000000ffffffff, 250, 250, 250, 250, 251, 251},
	{8, 0, 251, 0x00000000fafbfcfd, 249, 249, 249, 249, 250, 250},
	{8, 0, 51, 0x0000000072737475, 51, 51, 51, 51, 51, 51},
	{8, 150, 251, 0x0000000072737475, 251, 150, 150, 251, 150, 150},
}

// ----------

func TestFindFirstBEUint8(t *testing.T) {
	for _, tt := range testDataBE8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstBEUint8(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextBEUint8(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstBEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstBEUint8(0, 16, testDataBE8[4].blkpos, testDataBE8[4].first, testDataBE8[4].last, testDataBE8[4].search)
	}
}

func TestFindFirstSubBEUint8(t *testing.T) {
	for _, tt := range testDataBESub8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubBEUint8(0, 16, tt.blkpos, 0, 7, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubBEUint8(0, 16, tt.blkpos, 0, 7, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubBEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubBEUint8(0, 16, testDataBESub8[4].blkpos, 0, 7, testDataBESub8[4].first, testDataBESub8[4].last, testDataBESub8[4].search)
	}
}

func TestFindLastBEUint8(t *testing.T) {
	for _, tt := range testDataBE8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastBEUint8(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevBEUint8(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastBEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastBEUint8(0, 16, testDataBE8[4].blkpos, testDataBE8[4].first, testDataBE8[4].last, testDataBE8[4].search)
	}
}

func TestFindLastSubBEUint8(t *testing.T) {
	for _, tt := range testDataBESub8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubBEUint8(0, 16, tt.blkpos, 0, 7, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubBEUint8(0, 16, tt.blkpos, 0, 7, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubBEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubBEUint8(0, 16, testDataBESub8[4].blkpos, 0, 7, testDataBESub8[4].first, testDataBESub8[4].last, testDataBESub8[4].search)
	}
}

func TestFindFirstLEUint8(t *testing.T) {
	for _, tt := range testDataLE8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstLEUint8(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextLEUint8(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstLEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstLEUint8(0, 16, testDataLE8[4].blkpos, testDataLE8[4].first, testDataLE8[4].last, testDataLE8[4].search)
	}
}

func TestFindFirstSubLEUint8(t *testing.T) {
	for _, tt := range testDataLESub8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubLEUint8(0, 16, tt.blkpos, 0, 7, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubLEUint8(0, 16, tt.blkpos, 0, 7, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubLEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubLEUint8(0, 16, testDataLESub8[4].blkpos, 0, 7, testDataLESub8[4].first, testDataLESub8[4].last, testDataLESub8[4].search)
	}
}

func TestFindLastLEUint8(t *testing.T) {
	for _, tt := range testDataLE8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastLEUint8(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevLEUint8(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastLEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastLEUint8(0, 16, testDataLE8[4].blkpos, testDataLE8[4].first, testDataLE8[4].last, testDataLE8[4].search)
	}
}

func TestFindLastSubLEUint8(t *testing.T) {
	for _, tt := range testDataLESub8 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubLEUint8(0, 16, tt.blkpos, 0, 7, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubLEUint8(0, 16, tt.blkpos, 0, 7, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubLEUint8(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubLEUint8(0, 16, testDataLESub8[4].blkpos, 0, 7, testDataLESub8[4].first, testDataLESub8[4].last, testDataLESub8[4].search)
	}
}

// ----------

func TestFindFirstBEUint16(t *testing.T) {
	for _, tt := range testDataBE16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstBEUint16(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextBEUint16(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstBEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstBEUint16(0, 16, testDataBE16[4].blkpos, testDataBE16[4].first, testDataBE16[4].last, testDataBE16[4].search)
	}
}

func TestFindFirstSubBEUint16(t *testing.T) {
	for _, tt := range testDataBESub16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubBEUint16(0, 16, tt.blkpos, 0, 15, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubBEUint16(0, 16, tt.blkpos, 0, 15, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubBEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubBEUint16(0, 16, testDataBESub16[4].blkpos, 0, 15, testDataBESub16[4].first, testDataBESub16[4].last, testDataBESub16[4].search)
	}
}

func TestFindLastBEUint16(t *testing.T) {
	for _, tt := range testDataBE16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastBEUint16(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevBEUint16(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastBEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastBEUint16(0, 16, testDataBE16[4].blkpos, testDataBE16[4].first, testDataBE16[4].last, testDataBE16[4].search)
	}
}

func TestFindLastSubBEUint16(t *testing.T) {
	for _, tt := range testDataBESub16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubBEUint16(0, 16, tt.blkpos, 0, 15, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubBEUint16(0, 16, tt.blkpos, 0, 15, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubBEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubBEUint16(0, 16, testDataBESub16[4].blkpos, 0, 15, testDataBESub16[4].first, testDataBESub16[4].last, testDataBESub16[4].search)
	}
}

func TestFindFirstLEUint16(t *testing.T) {
	for _, tt := range testDataLE16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstLEUint16(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextLEUint16(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstLEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstLEUint16(0, 16, testDataLE16[4].blkpos, testDataLE16[4].first, testDataLE16[4].last, testDataLE16[4].search)
	}
}

func TestFindFirstSubLEUint16(t *testing.T) {
	for _, tt := range testDataLESub16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubLEUint16(0, 16, tt.blkpos, 0, 15, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubLEUint16(0, 16, tt.blkpos, 0, 15, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubLEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubLEUint16(0, 16, testDataLESub16[4].blkpos, 0, 15, testDataLESub16[4].first, testDataLESub16[4].last, testDataLESub16[4].search)
	}
}

func TestFindLastLEUint16(t *testing.T) {
	for _, tt := range testDataLE16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastLEUint16(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevLEUint16(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastLEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastLEUint16(0, 16, testDataLE16[4].blkpos, testDataLE16[4].first, testDataLE16[4].last, testDataLE16[4].search)
	}
}

func TestFindLastSubLEUint16(t *testing.T) {
	for _, tt := range testDataLESub16 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubLEUint16(0, 16, tt.blkpos, 0, 15, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubLEUint16(0, 16, tt.blkpos, 0, 15, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubLEUint16(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubLEUint16(0, 16, testDataLESub16[4].blkpos, 0, 15, testDataLESub16[4].first, testDataLESub16[4].last, testDataLESub16[4].search)
	}
}

// ----------

func TestFindFirstBEUint32(t *testing.T) {
	for _, tt := range testDataBE32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstBEUint32(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextBEUint32(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstBEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstBEUint32(0, 16, testDataBE32[4].blkpos, testDataBE32[4].first, testDataBE32[4].last, testDataBE32[4].search)
	}
}

func TestFindFirstSubBEUint32(t *testing.T) {
	for _, tt := range testDataBESub32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubBEUint32(0, 16, tt.blkpos, 8, 23, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubBEUint32(0, 16, tt.blkpos, 8, 23, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubBEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubBEUint32(0, 16, testDataBESub32[4].blkpos, 8, 23, testDataBESub32[4].first, testDataBESub32[4].last, testDataBESub32[4].search)
	}
}

func TestFindLastBEUint32(t *testing.T) {
	for _, tt := range testDataBE32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastBEUint32(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevBEUint32(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastBEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastBEUint32(0, 16, testDataBE32[4].blkpos, testDataBE32[4].first, testDataBE32[4].last, testDataBE32[4].search)
	}
}

func TestFindLastSubBEUint32(t *testing.T) {
	for _, tt := range testDataBESub32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubBEUint32(0, 16, tt.blkpos, 8, 23, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubBEUint32(0, 16, tt.blkpos, 8, 23, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubBEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubBEUint32(0, 16, testDataBESub32[4].blkpos, 8, 23, testDataBESub32[4].first, testDataBESub32[4].last, testDataBESub32[4].search)
	}
}

func TestFindFirstLEUint32(t *testing.T) {
	for _, tt := range testDataLE32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstLEUint32(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextLEUint32(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstLEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstLEUint32(0, 16, testDataLE32[4].blkpos, testDataLE32[4].first, testDataLE32[4].last, testDataLE32[4].search)
	}
}

func TestFindFirstSubLEUint32(t *testing.T) {
	for _, tt := range testDataLESub32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubLEUint32(0, 16, tt.blkpos, 8, 23, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubLEUint32(0, 16, tt.blkpos, 8, 23, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubLEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubLEUint32(0, 16, testDataLESub32[4].blkpos, 8, 23, testDataLESub32[4].first, testDataLESub32[4].last, testDataLESub32[4].search)
	}
}

func TestFindLastLEUint32(t *testing.T) {
	for _, tt := range testDataLE32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastLEUint32(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevLEUint32(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastLEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastLEUint32(0, 16, testDataLE32[4].blkpos, testDataLE32[4].first, testDataLE32[4].last, testDataLE32[4].search)
	}
}

func TestFindLastSubLEUint32(t *testing.T) {
	for _, tt := range testDataLESub32 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubLEUint32(0, 16, tt.blkpos, 8, 23, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubLEUint32(0, 16, tt.blkpos, 8, 23, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubLEUint32(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubLEUint32(0, 16, testDataLESub32[4].blkpos, 8, 23, testDataLESub32[4].first, testDataLESub32[4].last, testDataLESub32[4].search)
	}
}

// ----------

func TestFindFirstBEUint64(t *testing.T) {
	for _, tt := range testDataBE64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstBEUint64(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextBEUint64(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstBEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstBEUint64(0, 16, testDataBE64[4].blkpos, testDataBE64[4].first, testDataBE64[4].last, testDataBE64[4].search)
	}
}

func TestFindFirstSubBEUint64(t *testing.T) {
	for _, tt := range testDataBESub64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubBEUint64(0, 16, tt.blkpos, 16, 47, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubBEUint64(0, 16, tt.blkpos, 16, 47, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubBEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubBEUint64(0, 16, testDataBESub64[4].blkpos, 16, 47, testDataBESub64[4].first, testDataBESub64[4].last, testDataBESub64[4].search)
	}
}

func TestFindLastBEUint64(t *testing.T) {
	for _, tt := range testDataBE64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastBEUint64(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevBEUint64(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastBEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastBEUint64(0, 16, testDataBE64[4].blkpos, testDataBE64[4].first, testDataBE64[4].last, testDataBE64[4].search)
	}
}

func TestFindLastSubBEUint64(t *testing.T) {
	for _, tt := range testDataBESub64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubBEUint64(0, 16, tt.blkpos, 16, 47, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubBEUint64(0, 16, tt.blkpos, 16, 47, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubBEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubBEUint64(0, 16, testDataBESub64[4].blkpos, 16, 47, testDataBESub64[4].first, testDataBESub64[4].last, testDataBESub64[4].search)
	}
}

func TestFindFirstLEUint64(t *testing.T) {
	for _, tt := range testDataLE64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstLEUint64(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextLEUint64(0, 16, tt.blkpos, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstLEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstLEUint64(0, 16, testDataLE64[4].blkpos, testDataLE64[4].first, testDataLE64[4].last, testDataLE64[4].search)
	}
}

func TestFindFirstSubLEUint64(t *testing.T) {
	for _, tt := range testDataLESub64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindFirstSubLEUint64(0, 16, tt.blkpos, 16, 47, tt.first, tt.last, tt.search)
			if h != tt.foundFirst {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundFirst, h)
			}
			if f != tt.foundFFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundFFirst, f)
			}
			if l != tt.foundFLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundFLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasNextSubLEUint64(0, 16, tt.blkpos, 16, 47, pos, tt.last, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindFirstSubLEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindFirstSubLEUint64(0, 16, testDataLESub64[4].blkpos, 16, 47, testDataLESub64[4].first, testDataLESub64[4].last, testDataLESub64[4].search)
	}
}

func TestFindLastLEUint64(t *testing.T) {
	for _, tt := range testDataLE64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastLEUint64(0, 16, tt.blkpos, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevLEUint64(0, 16, tt.blkpos, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastLEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastLEUint64(0, 16, testDataLE64[4].blkpos, testDataLE64[4].first, testDataLE64[4].last, testDataLE64[4].search)
	}
}

func TestFindLastSubLEUint64(t *testing.T) {
	for _, tt := range testDataLESub64 {
		tt := tt
		t.Run("", func(t *testing.T) {
			t.Parallel()
			h, f, l := mf.FindLastSubLEUint64(0, 16, tt.blkpos, 16, 47, tt.first, tt.last, tt.search)
			if h != tt.foundLast {
				t.Errorf("Expected found 0x%x, got 0x%x", tt.foundLast, h)
			}
			if f != tt.foundLFirst {
				t.Errorf("Expected first 0x%x, got 0x%x", tt.foundLFirst, f)
			}
			if l != tt.foundLLast {
				t.Errorf("Expected last 0x%x, got 0x%x", tt.foundLLast, l)
			}
			numitems := tt.foundLast - tt.foundFirst + 1
			if (h < tt.last) && (numitems > 0) {
				pos := h
				ret := true
				var counter uint64
				for ret {
					ret, pos = mf.HasPrevSubLEUint64(0, 16, tt.blkpos, 16, 47, tt.first, pos, tt.search)
					counter++
				}
				if counter != numitems {
					t.Errorf("Expected next items %d, got %d", numitems, counter)
				}
			}
		})
	}
}

func BenchmarkFindLastSubLEUint64(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		mf.FindLastSubLEUint64(0, 16, testDataLESub64[4].blkpos, 16, 47, testDataLESub64[4].first, testDataLESub64[4].last, testDataLESub64[4].search)
	}
}
